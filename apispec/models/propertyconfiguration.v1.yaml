title: propertyConfiguration
type: object
description: Describes a property configuration. This contains all the settings.
x-examples:
  example-1:
    value:
      syntaxVersion: 1
      edgeLogic: 'location / {origin_pass my_origin_1572420965460;}'
      tlsMaxVersion: '1.2'
      tlsMinVersion: '1.1'
      tlsCertificateId: 8961b13c87cd30a7687edc8c
      origins:
        - hostHeader: testcustomer.g.qtlcdn.com
          servers:
            - edgetools.quantil.com
          name: my_origin_1572420965460
          directConnection: noDirect
      hostnames:
        - testcustomer1572420596536.g.qtlcdn.com
x-tags:
  - Property Management
properties:
  description:
    type: string
    description: |
      a description of the version
  cacheKeyHostname:
    type: string
    description: |
      The cachekey hostname must be a string made of lowercase letters, digits, dot, dash and underscore. If not specified, the incoming Host header value will be used and the cache will not be shared across different hostnames in this property.
    maxLength: 80
    pattern: '^[a-z.-_]+'
  hostnames:
    type: array
    description: Hostnames associated with the property.
    items:
      type: string
  realTimeLog:
    type: object
    description: 'This optional field allows you to configure notifications about client requests to be sent to a remote server.  It can only be used if you have access to our <i>realtime_log_switch</i> directive. Please contact our support team if you require this feature.'
    properties:
      logUrl:
        type: string
        description: 'The URL which receives the notifications. It must begin with “http” or "https". The server should support the POST method. This is a required field.'
      sampleRate:
        type: integer
        default: 1
        minimum: 1
        maximum: 65536
        description: 'An integer between [1, 65536]. n means one notification for every n edge requests. 1 means every edge request will generate a notification. This is optional. Default is 1.'
      escape:
        type: string
        enum:
          - json
          - none
        description: 'Specify <i>json</i> to enable JSON character escaping in variables or <i>none</i> to disable escaping.'
      format:
        type: string
        description: "This is a required field to specify the notification body to be sent to the remote server. It can be any printable text that can be sent in the body of an HTTP POST request. \n\nThe following built-in variables can be used within the format field. They will be replaced with the actual values in the notifications.\n<table>\n<tr><th>Name</th><th>Description</th></tr>\n<tr><td>$body_bytes_sent</td><td>Size of the response body.</td></tr>\n<tr><td>$bytes_sent</td><td>Size of the response, including body, headers and response line.</td></tr>\n<tr><td>$client_country_code</td><td>An ISO 3166-1 country code representing the country of the client request, for example, \"US\". \"ZZ\" is returned if the country is unknown.</td></tr>\n<tr><td>$client_real_ip</td><td>IP address of the client request.</td></tr>\n<tr><td>$cookie_x</td><td>This lets you obtain any cookie named x.  For example, $cookie_account would retrieve the value of a cookie named 'account'.</td></tr>\n<tr><td>$http_x</td><td>Obtain any HTTP header named x from the original request. The header name is converted to lower case with dashes replaced by underscores. For example, specify $http_user_agent to get the value of User-Agent.</td></tr>\n<tr><td>$msec</td><td>Current unix time in seconds with millisecond precision.</td></tr>\n<tr><td>$qtl_req_id</td><td>Unique identifier representing the request.</td></tr>\n<tr><td>$request_uri</td><td>HTTP request URI</td></tr>\n<tr><td>$request_method</td><td>The HTTP request method used to access the origin.</td></tr>\n<tr><td>$request_time</td><td>Response time in milliseconds. It is the time between receiving the request's  first byte and serving the last byte of the response.</td></tr>\n<tr><td>$sc_completed</td><td>1 to indicate the last byte of the object was served to the user, 0 otherwise.\n</td></tr>\n<tr><td>$sc_initial</td><td>1 to indicate the first byte of the object was served to the user, 0 otherwise.</td></tr>\n<tr><td>$scheme</td><td>Indicates the protocol of the user's request (\"http\" or https\").</td></tr>\n<tr><td>$sent_http_content_length</td><td>the original file size.</td></tr>\n<tr><td>$sent_http_x</td><td>Obtain the value of an HTTP header named x that is returned in the response to the client. The header name should be converted to lower case with dashes replaced by underscores. For example, $sent_http_etag would give you the value of the ETag header.</td></tr>\n<tr><td>$server_addr</td><td>IP address of edge node serving the user's request.</td></tr>\n<tr><td>$server_protocol</td><td>Indicates the version of HTTP used in the user's request, either \"HTTP/1.0\", \"HTTP/1.1\", or \"HTTP/2.0\".</td></tr>\n<tr><td>$ssl_cipher</td><td>Indicates the cipher suite used for the TLS (SSL) connection.</td></tr>\n<tr><td>$ssl_server_name</td><td>The hostname that a client initiating a TLS (SSL) connection is attempting to connect to. It is only sent by clients supporting SNI (Server Name Indication).</td></tr>\n<tr><td>$ssl_protocol</td><td>Indicates the TLS version used for the TLS (SSL) connection. Example versions include \"SSLv3\", \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", and \"unknown\".</td></tr>\n<tr><td>$status</td><td>An HTTP response code for the user's request.</td></tr>\n<tr><td>$tcpinfo_rtt</td><td>The time in microseconds taken by a packet to travel to the destination and back.</td></tr>\n</table>"
    required:
      - logUrl
  edgeLogic:
    type: string
    maxLength: 200000
    description: 'Refer to https://docs.quantil.com/edgelogic'
  hasBeian:
    type: boolean
    default: false
    description: 'The value indicates if all the hostnames in this property have Beian license on file with the Chinese government. This is required to serve this property from servers in mainland China. A value of <i>false</i> means servers outside of mainland China will be used to distribute content to visitors in China.'
  redirectHttpToHttps:
    type: boolean
    default: false
    description: 'When set to <i>true</i>, the server will redirect  all HTTP requests to HTTPS using status code 301.'
  origins:
    type: array
    description: "Describes the origin servers for the property's content."
    items:
      type: object
      description: Describes an origin server.
      properties:
        name:
          type: string
          description: |
            Name of an origin. It must be unique within this property.
          pattern: '^[a-zA-z0-9_]'
        servers:
          type: array
          description: "Each entry should be a string consisting of an address optionally followed by one or more parameters, separated by space. The address can take one of the following 3 forms:\n<ul>\n<li>{hostname or IP address}</li>\n<li>{hostname or IP address}:{http port}</li>\n<li>{hostname or IP address}:{http port},{https port}</li>\n</ul>\nValues for the HTTP and HTTPS ports should be integers in the range [1,65535]. \nEven when the value of <i>supportedProtocol</i> is “https”, the HTTPS port has to be specified after the comma.\nIn the third form, one of the two ports can be empty.\n\nThe only allowed parameter today is “backup\" which is used to indicate the server is a backup server. It will be used when the primary servers are unavailable.\n\nThere should be at least one primary server defined.\nExample:\n<code>[\"www.abc.com\", \"www1.abc.com:8080\", \"www2.abc.com:880,4443 backup\"]</code>\n"
          example: '[“www.abc.com”, “www1.abc.com:8080”, “www2.abc.com:880,4443 backup”]'
          items:
            type: string
        supportedProtocol:
          type: string
          description: |-
            This optional field indicates the protocol supported by the origin server.  If you do not have a “Protocol Downgrade Agreement” on file, AND this property has a certificate attached to it, the value cannot be <i>http</i>. Otherwise, error code “invalidProtocolDowngrade” will be returned if you specify <i>http</i>.
            If you do have the agreement on file with us, we also require the <i>allowProtocolDowngrade</i> field to be explicitly set to <i>true</i>.
          enum:
            - http
            - https
            - both
        directConnection:
          type: string
          default: auto
          description: "Optional. This parameter tells us how important it is to directly go to this origin without going through any intermediate cache to fetch content. The values can be “noDirect”, “auto”, “alwaysDirect”. \n\n“noDirect” means we always go through at least one intermediate cache. Customers who care particularly about the origin's workload can use this option. Our cache scheduler will dynamically pick the intermediate cache based on performance and resource availability.\n\n“auto” means the cache scheduler will make the choice dynamically based on performance and resource availability. This is the default behavior if not specified.\n\n“alwaysDirect” means we always directly connect to this origin.\n"
        hostHeader:
          type: string
          description: "Optional. It should be a valid hostname. It will also be used as the SNI servername when contacting the  HTTPS origin. We also allow it to be an nginx variable that begins with ‘$’ followed by [a-z_]{3,60}. Nginx variable names are case insensitive, so we only allow lowercase characters.\nIf not specified, the value of the HOST header in the request will be used. \n\nOne constraint is that if “aswS3” is specified for origin authentication, the value of <i>hostHeader</i> cannot be a variable or empty. It has to be a valid Amazon S3 hostname. Refer to https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html"
          format: hostname
        supportSni:
          type: boolean
          default: true
          description: 'Optional. If set to <i>true</i>, the SNI extension will be enabled in the TLS handshake with the origin server.'
        verifyOrigin:
          type: boolean
          default: false
          description: Optional. It controls whether the cache will validate the certificate of the origin.
        authentication:
          type: object
          description: |-
            Optional. It is a structure to specify the parameters, such as password, for authentication with the origin servers. It should have at least one field: ”methodName”, which should be a string indicating one of the predefined authentication methods. The only valid value at this time is “awsS3”. When “awsS3” is used, the following parameters are required:
            <ul>
            <li>awsS3.region</li>
            <li>awsS3.accessKey</li>
            <li>awsS3.secretKey</li>
            </ul>
            Also, the value of the <i>hostHeader</i> field cannot be a variable or empty. It must be a valid Amazon S3 hostname.

            Example:
            <code>
            {"methodName":"awsS3",
            "awsS3":{
            "region":"us-west-1",
            "accessKey":"sdnu2932",
            "secretKey":"d12345678abcdefghi"
            }}
            </code>
          example: '{“methodName”:”awsS3”, ”awsS3”:{ ”region”:”us-west-1”, ”accessKey”:”sdnu2932”, ”secretKey”:”d12133424fvregvrew” }}'
          properties:
            methodName:
              type: string
              description: Authentication method.
  syntaxVersion:
    type: number
    default: 1
    description: The value must be set to 1 at this time.
  disableHttp2:
    type: boolean
    default: false
    description: |
      When set to <i>true</i>, the server will not support HTTP/2. Only HTTP/1.1 will be supported.
  schemeInCacheKey:
    type: boolean
    default: false
    description: |
      It specifies whether the scheme (“http” or “https”) should be included in the cache key. Default behavior is </i>false</i>. Set to <i>true</i> if the content are known to be different for different schemes.
  tlsMaxVersion:
    type: string
    default: 1.3
    enum:
      - '1.1'
      - '1.2'
      - '1.3'
    description: Maximum supported TLS version.
  loadBalancerHashKey:
    type: string
    description: "Multiple tiers of load balancing are used in our CDN pops to distribute the client requests to different servers. We are using consistent hashing in many of those places. By default, the URL is used as the hash key, which should be good enough in most cases. Here you can define additional variables to be added to the hash key to distribute the requests more evenly. One typical use case is when all requests carry the same URL, but use a particular header to indicate the resources. \n\nThis is an optional field. The default value is an empty string. A valid value is a string meeting the following criteria:\n<ol>\n<li>Consists of alphanumeric characters, and underscore _, equal sign =, dollar sign $, and sign &.</li>\n<li>The variable names can only be in one of the following formats: $http_name, $cookie_name, or $arg_name</li>\n<li>At least one variable must be specified. No more than three are permitted.</li>\n<li>The total length should be no more than 100 characters.</li>\n</ol>\nThe validator will treat any dollar sign and the string after it (before any = or & or $) as a variable. \n\nHere are some examples of valid values:\n<table>\n<tr><td>$http_abc</td></tr>\n<tr><td>abc=$http_abc&def=$http_def&c_123=$cookie_123</td></tr>\n<tr><td>abc=$http_abc=$http_def</td></tr>\n<tr><td>$http_abc&$http_def</td></tr>\n<tr><td>=$http_abd&</td></tr>\n<tr><td>&&abc==$http_abc&&&===qwer</td></tr>\n</table>\n"
    maxLength: 100
  tlsCertificateId:
    type: number
    description: 'Refers to a <a href="#tag/Certificate-Management">certificate</a>.   It is invalid to only set the <i>tlsCertificateId1</i> field without setting the <i>tlsCertificateId</i> field. If <i>tlsCertificateId</i> is not set, HTTPS will not be enabled for this property. This is a feature to enable you to specify two certificates of different types, i.e. one RSA, one EC. If two certificates of the same type are specified, the one specified by <i>tlsCertificateId</i> will be ignored. '
  tlsMinVersion:
    type: string
    default: 1
    description: Minimum required TLS version.
    enum:
      - '1.1'
      - '1.2'
      - '1.3'
      - '1'
  tlsCiphers:
    type: string
    description: |
      Any cipher list supported by "openssl ciphers". See https://www.openssl.org/docs/manmaster/man1/ciphers.html
    maxLength: 2040
  allowProtocolDowngrade:
    type: boolean
    default: false
    description: " It can only be set to <i>true</i> if you have a “Protocol Downgrade Agreement” on file with us. This value only has an effect when the property has an attached certificate which means some client requests can use HTTPS. When this value is <i>false</i>, we require all the origins to support HTTPS. When this value is <i>true</i>, we allow origins that only support HTTP.\n"
  tlsCertificateId1:
    type: number
    description: "Refers to a <a href=\"#tag/Certificate-Management\">certificate</a>.  It is invalid to only set the <i>tlsCertificateId1</i> field without setting the <i>tlsCertificateId</i> field. If <i>tlsCertificateId</i> is not set, HTTPS will not be enabled for this property. This is a feature to enable you to specify two certificates of different types, i.e. one RSA, one EC. If two certificates of the same type are specified, the one specified by <i>tlsCertificateId</i> will be ignored. \n\n"
  videoSeek:
    type: object
    description: 'This object allows you to support video players requesting partial content through query string parameters. If you specify <i>videoSeek</i>, you must enter a value for <i>startParameter</i>.'
    properties:
      startParameter:
        type: string
        description: 'Name of the query parameter indicating the starting offset in bytes of the content to fetch. The parameter name should begin with a letter (a-z, a-Z) and may be followed by up to 30 letters and numbers.'
        minLength: 1
        maxLength: 31
      endParameter:
        type: string
        description: 'Name of the query parameter indicating the ending offset of the content to fetch. The parameter name should begin with a letter (a-z, a-Z) and may be followed by up to 30 letters and numbers.'
        minLength: 0
        maxLength: 31
    required:
      - startParameter
